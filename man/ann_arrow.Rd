% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layer_annotation.R
\name{ann_arrow}
\alias{ann_arrow}
\title{Add an "arrow" annotation to a Bokeh figure}
\usage{
ann_arrow(fig, x_start = NULL, y_start = NULL, x_end = NULL,
  y_end = NULL, color = NULL, alpha = NULL, line_width = NULL,
  data = figure_data(fig), start = NULL, start_units = NULL,
  end = NULL, end_units = NULL, line_dash = NULL, line_join = NULL,
  line_dash_offset = NULL, line_cap = NULL, lgroup = NULL,
  lname = NULL, ...)
}
\arguments{
\item{fig}{Figure to modify.}

\item{x_start}{The x-coordinates to locate the start of the arrows.}

\item{y_start}{The y-coordinates to locate the start of the arrows.}

\item{x_end}{The x-coordinates to locate the end of the arrows.}

\item{y_end}{The y-coordinates to locate the end of the arrows.}

\item{color}{Color for the glyph - a hex code (with no alpha) or any of the 147 named CSS colors, e.g 'green', 'indigo'. For glyphs with both fill and line properties, see "Handling color" below.}

\item{alpha}{The alpha transparency of the glyph between 0 (transparent) and 1 (opaque). If the glyph has both fill and color properties, see "Handling alpha" below.}

\item{line_width}{The line width values for the arrow body.}

\item{data}{An optional data frame supplying data to which other parameters can refer.}

\item{start}{Instance of ArrowHead.}

\item{start_units}{The unit type for the start_x and start_y attributes. Interpreted as "data space" units by default.}

\item{end}{Instance of ArrowHead.}

\item{end_units}{The unit type for the end_x and end_y attributes. Interpreted as "data space" units by default.}

\item{line_dash}{The line dash values for the arrow body.}

\item{line_join}{The line join values for the arrow body.}

\item{line_dash_offset}{The line dash offset values for the arrow body.}

\item{line_cap}{The line cap values for the arrow body.}

\item{lgroup}{Layer group.}

\item{lname}{Layer name.}

\item{\ldots}{additional parameters for fine control over fill and line properties (see "Additional parameters" below)}
}
\description{
Add an "arrow" annotation to a Bokeh figure
}
\section{Handling color}{
 The \code{color} parameter is a high-level plot attribute that provides default behavior for coloring glyphs.
\itemize{
  \item When using a glyph that only has line properties, this will be the color of the line.
  \item When using a glyph that has has line and fill properties, this will be the color of the line and the fill, with the alpha level of the fill reduced by 50\%.
  \item If full control over fill and line color is desired, the \code{fill_color} and \code{line_color} attributes can be specified explicitly and will override \code{color}.
}
When color is \code{NULL} and \code{fill_color} or \code{line_color} are not specified, the color will be chosen from the theme.
}

\section{Handling alpha}{
 The \code{alpha} is a high-level plot attribute that sets the transparency of the glyph being plotted.
\itemize{
  \item When using a glyph that only has line properties, this will be the alpha of the line.
  \item When using a glyph that has has line and fill properties, this will be the alpha of the line and the alpha of the fill will be set to 50\% of this value.
  \item Individual fill and line alpha can be specified with \code{fill_alpha} and \code{line_alpha} and will override \code{alpha}.
}
}

\section{Additional parameters}{

\tabular{ll}{
  \code{fill_color} \tab color to use to fill the glyph with - a hex code (with no alpha) or any of the 147 named CSS colors, e.g 'green', 'indigo' \cr
  \code{fill_alpha} \tab transparency value between 0 (transparent) and 1 (opaque) \cr
  \code{line_color} \tab color to use to stroke lines with - a hex code (with no alpha) or any of the 147 named CSS colors, e.g 'green', 'indigo' \cr
  \code{line_width} \tab stroke width in units of pixels \cr
  \code{line_alpha} \tab transparency value between 0 (transparent) and 1 (opaque) \cr
  \code{line_join} \tab how path segments should be joined together 'miter' 'round' 'bevel' \cr
  \code{line_cap} \tab how path segments should be terminated 'butt' 'round' 'square' \cr
  \code{line_dash} \tab array of integer pixel distances that describe the on-off pattern of dashing to use \cr
  \code{line_dash_offset} \tab the distance in pixels into the line_dash that the pattern should start from
 }
}

\examples{
figure() \%>\%
  ly_points(1:10, 1:10) \%>\%
  ann_arrow(3, 5, 4, 4)

# with different head
figure() \%>\%
  ly_points(1:10, 1:10) \%>\%
  ann_arrow(3, 5, 4, 4, end = "vee")

# with more specific head parameters using "arrow()"
figure() \%>\%
  ly_points(1:10, 1:10) \%>\%
  ann_arrow(3, 5, 4, 4, end = arrow("vee", color = "red"))

# vectorized example using a data frame of values as input
da <- cbind(expand.grid(1:4, 3:8), cbind(expand.grid(2:5, 4:9)))
names(da) <- c("x1", "y1", "x2", "y2")
figure() \%>\%
  ly_points(x = 1:5, y = 3:7) \%>\%
  ann_arrow(x1, y1, x2, y2, data = da,
    end = arrow("vee", color = "red", size = 50), start = arrow("tee", color = "red"))
}
\seealso{
Other annotation functions: \code{\link{ann_band}},
  \code{\link{ann_box}}, \code{\link{ann_labels}},
  \code{\link{ann_poly}}, \code{\link{ann_span}},
  \code{\link{ann_title}}, \code{\link{ann_whisker}},
  \code{\link{arrow}}
}
\concept{annotation functions}
